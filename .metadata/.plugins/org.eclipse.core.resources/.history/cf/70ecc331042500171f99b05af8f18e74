package kg.rp.ibl;

import java.awt.*;
import java.awt.geom.*;
import java.awt.image.*;
import java.util.*;
import java.util.List;
import java.util.function.*;

import kg.rp.ibl.util.*;
import kg.rp.vis.*;

@SuppressWarnings("serial")
public class PainelPontos extends PainelBase
{
	private List<ParâmetrosDesenho> conjs;
	private Collection<Classificação<String>> todosPontos;
	private Function<Classificação<String>, Color> cores;
	
	private BufferedImage img;
	
	public PainelPontos(int larg, int alt, Function<Classificação<String>, Color> cores)
	{
		super(larg, alt);
		
		this.cores = cores;
		
		conjs = new LinkedList<>();
		todosPontos = new HashSet<>();
	}

	public void adicionar(
			Collection<Classificação<String>> pontos, RectangularShape forma,
			//Function<Classificação<String>, Color> cores,
			double raio, boolean preencher)
	{
		conjs.add(new ParâmetrosDesenho(pontos, forma, raio, preencher));
		todosPontos.addAll(pontos);
	}
	
	@Override
	public void mostrar()
	{
		img = criarCamada();
		limpar(img, Color.WHITE);
		
		// Escala
		calcularEscala(todosPontos, Utilidades.classificaçãoParaPonto());
		
		// Desenha pontos
		for (ParâmetrosDesenho par : conjs)
			desenharPontos(img, par.pontos, Utilidades.classificaçãoParaPonto(),
					par.forma, par.raio, cores, par.preencher);
		
		super.mostrar();
	}
	
	@Override
	protected void montarPainel()
	{
		GroupLayout layout = new GroupLayout(painel);
		painel.setLayout(layout);
	}
	
	@Override
	public void paint(Graphics gr)
	{
		gr.drawImage(img, 0, 0, null);
	}
	
	private static class ParâmetrosDesenho
	{
		Collection<Classificação<String>> pontos;
		RectangularShape forma;
		//Function<Classificação<String>, Color> cores;
		double raio;
		boolean preencher;
		
		public ParâmetrosDesenho(
				Collection<Classificação<String>> pontos, RectangularShape forma,
				//Function<Classificação<String>, Color> cores,
				double raio, boolean preencher)
		{
			this.pontos = pontos;
			this.forma = forma;
			//this.cores = cores;
			this.raio = raio;
			this.preencher = preencher;
		}
	}
}
